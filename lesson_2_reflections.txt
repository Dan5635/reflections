What happens when you initialize a repository? Why do you need to do it?
	- When you initialize the a repository there is a .git file created that contains the metadata for the repository. You need to do this so that there is a starting point for your repository from there you can commit them.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	- The staging area seems to be different from the working directory and the repository because it is an inbetween ground between your current work and committing it to the respoistory. Also from what I learned there is no way to go back to a staging area. I believe this adds value because it allows you to check your work before making a commit, allowing you to make sure each commit is one logical change.

How can you use the staging area to make sure you have one commit per logical
change?
	- When you have finished making the changes you wish to make you could then run a git diff command to compare the changes from your working directory to the staging area which contains a copy of the most recent repository. Once you verify that these are the changes you wish to make you can git add the files you wish to commit with the changes. Next you could then run git diff --staged to compare your staging area (which would now hold the changed files) to the most recent commit in the repository. As long as these are the changes you want to make you could then run git commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	- If you had a website that you were working on implementing a new payment authorization service you would want to create a branch for this to test it thouroughly before moving it to production. Creating a branch would allow you to do this without changing the master branch until you are positive it works.
	- Another example would be redesigning the front end of a website, while still maintaining the current one
	- Working on a team project where different groups are working on different features.

How do the diagrams help you visualize the branch structure?
	- The diagrams helped me visualize the branch stucture so I can see exactly where each branch is comming from. From there I am able to see what commits from the master branch have been added since the current branch had been created. It helps show what branches have what features and where they stand in chronological order from their creation.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	- The result of merging two branches together is having 1 master branch hopefully. You would have the changes that were made in the branch and all the changes in the master that were added since the branch combined into one working project. From here the commit would have a parent to the head of the (most recent branch commit and master commit). You would also then beable to remove the label for the branch and just have the master again. 
	- Representing this in the diagram makes it easier to see where each commit came from and also when in chronological order. It also is helpful to see where the branch was created from.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?